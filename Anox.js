const qrcode = require("qrcode-terminal");
const fs = require('fs');
const pino = require('pino');
const { default: makeWASocket, Browsers, delay, useMultiFileAuthState, fetchLatestBaileysVersion, PHONENUMBER_MCC, jidNormalizedUser } = require("@whiskeysockets/baileys");
const NodeCache = require("node-cache");
const chalk = require("chalk");
const readline = require("readline");

const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
const question = (text) => new Promise((resolve) => rl.question(text, resolve));

async function getUserName() {
    let name = await question(chalk.bgBlack(chalk.greenBright(`‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§®‡§æ‡§Æ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç: `)));
    fs.writeFileSync('./sessions/username.txt', name);
    return name;
}

async function getPhoneNumber() {
    let phoneNumber = await question(chalk.bgBlack(chalk.greenBright(`‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ WhatsApp ‡§®‡§Ç‡§¨‡§∞ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç (‡§â‡§¶‡§æ‡§π‡§∞‡§£: +918302788872): `)));
    return phoneNumber.replace(/[^0-9]/g, '');
}

async function qr() {
    const name = await getUserName(); // ‡§®‡§æ‡§Æ ‡§á‡§®‡§™‡•Å‡§ü ‡§≤‡•á‡§Ç
    let phoneNumber = await getPhoneNumber(); // ‡§´‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ ‡§á‡§®‡§™‡•Å‡§ü ‡§≤‡•á‡§Ç

    let { version, isLatest } = await fetchLatestBaileysVersion();
    const { state, saveCreds } = await useMultiFileAuthState(`./sessions`);
    const msgRetryCounterCache = new NodeCache();
    
    const XeonBotInc = makeWASocket({
        logger: pino({ level: 'silent' }),
        printQRInTerminal: true,
        browser: Browsers.windows('Firefox'),
        auth: {
            creds: state.creds,
            keys: state.keys,
        },
        markOnlineOnConnect: true,
        generateHighQualityLinkPreview: true,
        getMessage: async (key) => {
            let jid = jidNormalizedUser(key.remoteJid);
            let msg = await store.loadMessage(jid, key.id);
            return msg?.message || "";
        },
        msgRetryCounterCache,
        defaultQueryTimeoutMs: undefined,
    });

    // ‡§™‡•á‡§Ø‡§∞‡§ø‡§Ç‡§ó ‡§ï‡•ã‡§° ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç
    try {
        const code = await XeonBotInc.requestPairingCode(phoneNumber);
        console.log(chalk.black(chalk.bgGreen(`üáæ‚Äåüá¥‚Äåüá∫‚Äåüá∑‚Äå üáµ‚Äåüá¶‚ÄåüáÆ‚Äåüá∑‚ÄåüáÆ‚Äåüá≥‚Äåüá¨‚Äå üá®‚Äåüá¥‚Äåüá©‚Äåüá™‚Äå :-  `)), chalk.black(chalk.white(code)));
    } catch (error) {
        console.error(chalk.red("‡§™‡•á‡§Ø‡§∞‡§ø‡§Ç‡§ó ‡§ï‡•ã‡§° ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: "), error);
        return;
    }

    XeonBotInc.ev.on("connection.update", async (s) => {
        const { connection, lastDisconnect } = s;
        if (connection === "open") {
            await delay(1000 * 10);
            await XeonBotInc.sendMessage(XeonBotInc.user.id, { text: `WELCOME ${name}, ‡§Ü‡§™‡§ï‡§æ ‡§≤‡•â‡§ó‡§ø‡§® ‡§∏‡§´‡§≤ ‡§∞‡§π‡§æ!` });
            
            // ‡§∏‡§Æ‡•Ç‡§π UID ‡§¶‡§ø‡§ñ‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™
            let showGroups = await question(chalk.bgBlack(chalk.greenBright(`‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§∏‡§Æ‡•Ç‡§π UID ‡§¶‡•á‡§ñ‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç? (YES/NO): `)));
            if (showGroups.toUpperCase() === 'YES') {
                // ‡§Ø‡§π‡§æ‡§Å ‡§™‡§∞ ‡§∏‡§Æ‡•Ç‡§π UID ‡§¶‡§ø‡§ñ‡§æ‡§®‡•á ‡§ï‡§æ ‡§ï‡•ã‡§° ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
                console.log(chalk.black(chalk.green("‡§∏‡§Æ‡•Ç‡§π UID ‡§Ø‡§π‡§æ‡§Å ‡§¶‡§ø‡§ñ‡§æ‡§Ø‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ...")));
                // (‡§Ü‡§™‡§ï‡§æ ‡§∏‡§Æ‡•Ç‡§π UID ‡§¶‡§ø‡§ñ‡§æ‡§®‡•á ‡§ï‡§æ ‡§ï‡•ã‡§°)
            }

            // ‡§∏‡§Æ‡•Ç‡§π ‡§Ø‡§æ ‡§´‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ ‡§™‡§∞ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≠‡•á‡§ú‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§™‡•Ç‡§õ‡•á‡§Ç
            let runCount = await question(chalk.bgBlack(chalk.greenBright(`‡§Ü‡§™ ‡§ï‡§ø‡§§‡§®‡•Ä ‡§¨‡§æ‡§∞ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≠‡•á‡§ú‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç? `)));
            for (let i = 0; i < runCount; i++) {
                let recipientType = await question(chalk.bgBlack(chalk.greenBright(`‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§∏‡§Æ‡•Ç‡§π UID (GROUP) ‡§Ø‡§æ ‡§´‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ (NUMBER) ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç? `)));
                let recipient;
                if (recipientType.toUpperCase() === 'GROUP') {
                    recipient = await question(chalk.bgBlack(chalk.greenBright(`‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§Æ‡•Ç‡§π UID ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç: `)));
                } else {
                    recipient = await question(chalk.bgBlack(chalk.greenBright(`‡§ï‡•É‡§™‡§Ø‡§æ ‡§´‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç: `)));
                }
                let time = await question(chalk.bgBlack(chalk.greenBright(`‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§Æ‡§Ø (‡§∏‡•á‡§ï‡§Ç‡§° ‡§Æ‡•á‡§Ç) ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç: `)));
                let headerName = await question(chalk.bgBlack(chalk.greenBright(`‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§ï‡§æ ‡§∂‡•Ä‡§∞‡•ç‡§∑‡§ï ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç: `)));
                let messageFilePath = await question(chalk.bgBlack(chalk.greenBright(`‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡§æ ‡§™‡§• ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç: `)));
                
                // ‡§Ø‡§π‡§æ‡§Å ‡§™‡§∞ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≠‡•á‡§ú‡§®‡•á ‡§ï‡§æ ‡§ï‡•ã‡§° ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
                const messages = fs.readFileSync(messageFilePath, 'utf8').split('\n');
                for (const message of messages) {
                    const finalMessage = `${headerName} ${message}`;
                    // Send message logic here
                    console.log(`‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≠‡•á‡§ú‡§æ ‡§ó‡§Ø‡§æ: ${finalMessage} to ${recipient}`); // Placeholder for sending message
                    await delay(time * 1000); // ‡§∏‡§Æ‡§Ø ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§¶‡•á‡§∞‡•Ä
                }
            }

            process.exit(0);
        }
        if (connection === "close" && lastDisconnect && lastDisconnect.error && lastDisconnect.error.output.statusCode != 401) {
            qr();
        }
    });

    XeonBotInc.ev.on('creds.update', saveCreds);
    XeonBotInc.ev.on("messages.upsert", () => { });
}

qr();

process.on('uncaughtException', function (err) {
    let e = String(err);
    if (e.includes("conflict")) return;
    if (e.includes("not-authorized")) return;
    if (e.includes("Socket connection timeout")) return;
    if (e.includes("rate-overlimit")) return;
    if (e.includes("Connection Closed")) return;
    if (e.includes("Timed Out")) return;
    if (e.includes("Value not found")) return;
    console.log('Caught exception: ', err);
});
