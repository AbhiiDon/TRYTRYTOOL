const fs = require("fs");
const pino = require("pino");
const { default: makeWASocket, Browsers, delay, useMultiFileAuthState, fetchLatestBaileysVersion, PHONENUMBER_MCC } = require("@whiskeysockets/baileys");
const readline = require("readline");
const chalk = require("chalk");

const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
const question = (text) => new Promise((resolve) => rl.question(text, resolve));

async function start() {
    console.clear();
    console.log('\x1b[33m%s\x1b[0m\n', `
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó
   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ïù
   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù 
   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ñà‚ñà‚ïó 
   ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïó
   ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù
`);

    const userName = await question(chalk.bgBlack(chalk.greenBright(`‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§®‡§æ‡§Æ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç: `)));
    const authFilePath = `./sessions_${userName}.json`;
    const logFilePath = `./log_${userName}.txt`;

    if (fs.existsSync(authFilePath)) {
        console.log(chalk.bgBlack(chalk.yellowBright("‡§∏‡§π‡•á‡§ú‡•á ‡§ó‡§è ‡§ï‡•ç‡§∞‡•á‡§°‡•á‡§Ç‡§∂‡§ø‡§Ø‡§≤‡•ç‡§∏ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§§‡•á ‡§π‡•Å‡§è ‡§≤‡•â‡§ó‡§ø‡§® ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...")));
        const { state, saveCreds } = await useMultiFileAuthState(authFilePath);
        await loginWithAuth(state, saveCreds, userName, logFilePath);
    } else {
        console.log(chalk.bgBlack(chalk.yellowBright("‡§ï‡•ã‡§à ‡§∏‡§π‡•á‡§ú‡•á ‡§ó‡§è ‡§ï‡•ç‡§∞‡•á‡§°‡•á‡§Ç‡§∂‡§ø‡§Ø‡§≤‡•ç‡§∏ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•á‡•§ ‡§≤‡•â‡§ó‡§ø‡§® ‡§µ‡§ø‡§ß‡§ø ‡§ö‡•Å‡§®‡•á‡§Ç:")));
        const loginMethod = await question(chalk.bgBlack(chalk.greenBright("1. QR ‡§ï‡•ã‡§° ‡§∏‡•á ‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡§∞‡•á‡§Ç\n2. ‡§™‡•á‡§Ø‡§∞‡§ø‡§Ç‡§ó ‡§ï‡•ã‡§° ‡§∏‡•á ‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡§∞‡•á‡§Ç\n‡§Ö‡§™‡§®‡§æ ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç (1 ‡§Ø‡§æ 2): ")));

        if (loginMethod === '1') {
            await qr(userName, logFilePath);
        } else if (loginMethod === '2') {
            await pairing(userName, logFilePath);
        } else {
            console.log(chalk.bgBlack(chalk.redBright("‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ 1 ‡§Ø‡§æ 2 ‡§ö‡•Å‡§®‡•á‡§Ç‡•§")));
        }
    }
}

async function qr(userName, logFilePath) {
    const { version } = await fetchLatestBaileysVersion();
    const { state, saveCreds } = await useMultiFileAuthState(`./sessions_${userName}.json`);

    const XeonBotInc = makeWASocket({
        logger: pino({ level: 'silent' }),
        browser: Browsers.windows('Firefox'),
        auth: state,
        version
    });

    XeonBotInc.ev.on('connection.update', async (update) => {
        const { qr, connection } = update;
        if (qr) {
            console.log('QR ‡§ï‡•ã‡§° ‡§Ø‡§π‡§æ‡§Å ‡§π‡•à, ‡§ï‡•É‡§™‡§Ø‡§æ ‡§á‡§∏‡•á ‡§∏‡•ç‡§ï‡•à‡§® ‡§ï‡§∞‡•á‡§Ç:');
            console.log(qr); // QR ‡§ï‡•ã‡§° ‡§Ø‡§π‡§æ‡§Å ‡§∏‡§π‡•Ä ‡§§‡§∞‡•Ä‡§ï‡•á ‡§∏‡•á ‡§™‡•ç‡§∞‡§ø‡§Ç‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ
        }
        if (connection === "open") {
            console.log("‡§≤‡•â‡§ó‡§ø‡§® ‡§∏‡§´‡§≤ ‡§π‡•Å‡§Ü!");
            await saveCreds();
            await logToFile(logFilePath, "‡§≤‡•â‡§ó‡§ø‡§® ‡§∏‡§´‡§≤ ‡§π‡•Å‡§Ü!");
            await displayGroupIds(XeonBotInc, userName, logFilePath);
        } else if (connection === "close") {
            console.log(chalk.bgBlack(chalk.redBright("‡§≤‡•â‡§ó‡§ø‡§® ‡§µ‡§ø‡§´‡§≤‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§")));
            await logToFile(logFilePath, "‡§≤‡•â‡§ó‡§ø‡§® ‡§µ‡§ø‡§´‡§≤‡•§");
        }
    });
}

async function pairing(userName, logFilePath) {
    const { version } = await fetchLatestBaileysVersion();
    const { state, saveCreds } = await useMultiFileAuthState(`./sessions_${userName}.json`);

    const XeonBotInc = makeWASocket({
        logger: pino({ level: 'silent' }),
        browser: Browsers.windows('Firefox'),
        auth: state,
        version
    });

    let phoneNumber = await question(chalk.bgBlack(chalk.greenBright(`‡§ï‡•É‡§™‡§Ø‡§æ ‡§´‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç (‡§¶‡•á‡§∂ ‡§ï‡•ã‡§° ‡§ï‡•á ‡§∏‡§æ‡§•): `)));
    phoneNumber = phoneNumber.replace(/[^0-9]/g, '');
    
    if (!phoneNumber.startsWith('91')) {
        phoneNumber = '91' + phoneNumber;
    }

    console.log(chalk.bgBlack(chalk.yellowBright("‡§™‡•á‡§Ø‡§∞‡§ø‡§Ç‡§ó ‡§ï‡•ã‡§° ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à...")));
    
    // ‡§™‡•á‡§Ø‡§∞‡§ø‡§Ç‡§ó ‡§ï‡•ã‡§° ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç
    setTimeout(async () => {
        let code = await XeonBotInc.requestPairingCode(phoneNumber);
        code = code?.match(/.{1,4}/g)?.join("-") || code;
        console.log(chalk.black(chalk.bgGreen(`üáæ‚Äåüá¥‚Äåüá∫‚Äåüá∑‚Äå üáµ‚Äåüá¶‚ÄåüáÆ‚Äåüá∑‚ÄåüáÆ‚Äåüá≥‚Äåüá¨‚Äå üá®‚ÄåŒø‚Äåüá©‚Äåüá™‚Äå :-  `)), chalk.black(chalk.white(code)));
    }, 5000);

    // ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§ï‡•Ä ‡§ú‡§æ‡§Å‡§ö ‡§ï‡§∞‡•á‡§Ç
    XeonBotInc.ev.on("connection.update", async (s) => {
        const { connection, lastDisconnect } = s;
        if (connection === "open") {
            console.log(chalk.green("‡§≤‡•â‡§ó‡§ø‡§® ‡§∏‡§´‡§≤!"));
            await saveCreds();
            await logToFile(logFilePath, "‡§≤‡•â‡§ó‡§ø‡§® ‡§∏‡§´‡§≤!");
            await displayGroupIds(XeonBotInc, userName, logFilePath);
        } else if (connection === "close") {
            console.log(chalk.bgBlack(chalk.redBright("‡§≤‡•â‡§ó‡§ø‡§® ‡§µ‡§ø‡§´‡§≤‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§")));
            await logToFile(logFilePath, "‡§≤‡•â‡§ó‡§ø‡§® ‡§µ‡§ø‡§´‡§≤‡•§");
        }
    });
}

async function loginWithAuth(state, saveCreds, userName, logFilePath) {
    const XeonBotInc = makeWASocket({
        logger: pino({ level: 'silent' }),
        browser: Browsers.windows('Firefox'),
        auth: state
    });

    XeonBotInc.ev.on("connection.update", async (update) => {
        const { connection } = update;
        if (connection === "open") {
            console.log("‡§∏‡§π‡•á‡§ú‡•á ‡§ó‡§è ‡§ï‡•ç‡§∞‡•á‡§°‡•á‡§Ç‡§∂‡§ø‡§Ø‡§≤‡•ç‡§∏ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§≤‡•â‡§ó‡§ø‡§® ‡§π‡•Å‡§Ü!");
            await saveCreds();
            await logToFile(logFilePath, "‡§∏‡§π‡•á‡§ú‡•á ‡§ó‡§è ‡§ï‡•ç‡§∞‡•á‡§°‡•á‡§Ç‡§∂‡§ø‡§Ø‡§≤‡•ç‡§∏ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§≤‡•â‡§ó‡§ø‡§® ‡§π‡•Å‡§Ü!");
            await displayGroupIds(XeonBotInc, userName, logFilePath);
        }
    });

    XeonBotInc.ev.on('creds.update', saveCreds);
}

async function displayGroupIds(client, userName, logFilePath) {
    const groupListConfirmation = await question(chalk.bgBlack(chalk.greenBright(`‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§∏‡§Æ‡•Ç‡§π ‡§Ü‡§à‡§°‡•Ä ‡§∏‡•Ç‡§ö‡•Ä ‡§¶‡•á‡§ñ‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç? (‡§π‡§æ‡§Å/‡§®‡§π‡•Ä‡§Ç): `)));

    if (groupListConfirmation.toLowerCase() === '‡§π‡§æ‡§Å') {
        const groupIds = await client.groupFetchAll();
        console.log(chalk.bgBlack(chalk.yellowBright("‡§∏‡§Æ‡•Ç‡§π ‡§Ü‡§à‡§°‡•Ä:")));
        for (const [id, group] of Object.entries(groupIds)) {
            console.log(`- ${group.id}`);
        }
        await logToFile(logFilePath, "‡§∏‡§Æ‡•Ç‡§π ‡§Ü‡§à‡§°‡•Ä ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§ø‡§§ ‡§ï‡•Ä ‡§ó‡§à‡•§");
    }

    const runTimes = await question(chalk.bgBlack(chalk.greenBright(`‡§ï‡§ø‡§§‡§®‡•Ä ‡§ú‡§ó‡§π‡•ã‡§Ç ‡§™‡§∞ ‡§¨‡•â‡§ü ‡§ö‡§≤‡§æ‡§®‡§æ ‡§π‡•à? `)));
    await handleMessaging(client, runTimes, logFilePath);
}

async function handleMessaging(client, runTimes) {
    for (let i = 0; i < runTimes; i++) {
        const targetType = await question(chalk.bgBlack(chalk.greenBright(`‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ '‡§®‡§Ç‡§¨‡§∞' ‡§Ø‡§æ '‡§∏‡§Æ‡•Ç‡§π' ‡§ï‡•ã ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≠‡•á‡§ú‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç? `)));

        let targetId;
        if (targetType.toLowerCase() === 'number') {
            targetId = await question(chalk.bgBlack(chalk.greenBright(`‡§ï‡•É‡§™‡§Ø‡§æ ‡§´‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç (‡§¶‡•á‡§∂ ‡§ï‡•ã‡§° ‡§ï‡•á ‡§∏‡§æ‡§•): `)));
        } else if (targetType.toLowerCase() === 'group') {
            targetId = await question(chalk.bgBlack(chalk.greenBright(`‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§Æ‡•Ç‡§π ‡§Ü‡§à‡§°‡•Ä ‡§Ø‡§æ ‡§®‡§ø‡§Æ‡§Ç‡§§‡•ç‡§∞‡§£ ‡§≤‡§ø‡§Ç‡§ï ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç: `)));
        } else {
            console.log(chalk.bgBlack(chalk.redBright("‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§á‡§®‡§™‡•Å‡§ü‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ '‡§®‡§Ç‡§¨‡§∞' ‡§Ø‡§æ '‡§∏‡§Æ‡•Ç‡§π' ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç.")));
            i--;
            continue;
        }

        const speed = await question(chalk.bgBlack(chalk.greenBright(`‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≠‡•á‡§ú‡§®‡•á ‡§ï‡§æ ‡§Ö‡§Ç‡§§‡§∞‡§æ‡§≤ ‡§∏‡•á‡§ï‡§Ç‡§° ‡§Æ‡•á‡§Ç ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç: `)));
        const filePath = await question(chalk.bgBlack(chalk.greenBright(`‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡§æ ‡§™‡§• ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç: `)));

        if (!fs.existsSync(filePath)) {
            console.log(chalk.bgBlack(chalk.redBright("‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡§æ ‡§™‡§• ‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§π‡•Ä ‡§™‡§• ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç‡•§")));
            i--;
            continue;
        }

        const messages = fs.readFileSync(filePath, "utf-8").split("\n");

        for (const message of messages) {
            await client.sendMessage(targetId, { text: message });
            console.log(chalk.green(`‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≠‡•á‡§ú‡§æ: ${message}`));
            await delay(speed * 1000); // ‡§∏‡§Æ‡§Ø ‡§Ö‡§Ç‡§§‡§∞‡§æ‡§≤ ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≠‡•á‡§ú‡•á‡§Ç
        }
    }

    // ‡§ï‡•ç‡§∞‡•á‡§°‡•á‡§Ç‡§∂‡§ø‡§Ø‡§≤‡•ç‡§∏ ‡§ï‡•ã ‡§®‡§æ‡§Æ ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§∏‡§π‡•á‡§ú‡§®‡§æ
    const credentialsPath = `./sessions_${userName}.json`;
    if (!fs.existsSync(credentialsPath)) {
        fs.writeFileSync(credentialsPath, JSON.stringify(client.authState, null, 2));
        console.log(chalk.bgBlack(chalk.greenBright("‡§ï‡•ç‡§∞‡•á‡§°‡•á‡§Ç‡§∂‡§ø‡§Ø‡§≤‡•ç‡§∏ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§∏‡§π‡•á‡§ú‡•á ‡§ó‡§è‡•§")));
    }

    console.log(chalk.bgBlack(chalk.greenBright("‡§∏‡§≠‡•Ä ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§≠‡•á‡§ú‡•á ‡§ó‡§è ‡§π‡•à‡§Ç‡•§")));
}
