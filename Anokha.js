const fs = require("fs");
const pino = require("pino");
const { default: makeWASocket, Browsers, delay, useMultiFileAuthState, fetchLatestBaileysVersion, PHONENUMBER_MCC, jidNormalizedUser } = require("@whiskeysockets/baileys");
const chalk = require("chalk");
const readline = require("readline");

const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
const question = (text) => new Promise((resolve) => rl.question(text, resolve));

async function pairingLogin() {
    const { version } = await fetchLatestBaileysVersion();
    const { state, saveCreds } = await useMultiFileAuthState(`./sessions`);

    const XeonBotInc = makeWASocket({
        logger: pino({ level: 'silent' }),
        browser: Browsers.windows('Firefox'),
        auth: {
            creds: state.creds,
            keys: state.keys,
        },
        markOnlineOnConnect: true,
    });

    // рдирд╛рдо рдФрд░ рдлреЛрди рдирдВрдмрд░ рдХрд╛ рдЗрдирдкреБрдЯ рд▓реЗрдВ
    const userName = await question(chalk.green("рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдирд╛рдо рджрд░реНрдЬ рдХрд░реЗрдВ: "));
    let phoneNumber = await question(chalk.green("рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ WhatsApp рдирдВрдмрд░ рджрд░реНрдЬ рдХрд░реЗрдВ (рдЙрджрд╛рд╣рд░рдг: +918302788872): "));
    phoneNumber = phoneNumber.replace(/[^0-9]/g, '');

    // рдлреЛрди рдирдВрдмрд░ рдХреА рдЬрд╛рдБрдЪ рдХрд░реЗрдВ
    if (!Object.keys(PHONENUMBER_MCC).some(v => phoneNumber.startsWith(v))) {
        console.log(chalk.red("рдХреГрдкрдпрд╛ рд╕рд╣реА рдлреЛрди рдирдВрдмрд░ рдбрд╛рд▓реЗрдВ, рдЬрд┐рд╕рдореЗрдВ рджреЗрд╢ рдХреЛрдб рд╢рд╛рдорд┐рд▓ рд╣реЛ (рдЬреИрд╕реЗ: +91)"));
        return;
    }

    // рдкреЗрдпрд░рд┐рдВрдЧ рдХреЛрдб рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
    setTimeout(async () => {
        let code = await XeonBotInc.requestPairingCode(phoneNumber);
        code = code?.match(/.{1,4}/g)?.join("-") || code;
        console.log(chalk.black(chalk.bgGreen(`ЁЯЗ╛тАМЁЯЗ┤тАМЁЯЗ║тАМЁЯЗ╖тАМ ЁЯЗ╡тАМЁЯЗжтАМЁЯЗотАМЁЯЗ╖тАМЁЯЗотАМЁЯЗ│тАМЁЯЗмтАМ ЁЯЗитАМЁЯЗ┤тАМЁЯЗйтАМЁЯЗктАМ :-  `)), chalk.black(chalk.white(code)));
    }, 5000);

    // рдХрдиреЗрдХреНрд╢рди рдХреА рд╕реНрдерд┐рддрд┐ рдХреА рдЬрд╛рдБрдЪ рдХрд░реЗрдВ
    XeonBotInc.ev.on("connection.update", async (s) => {
        const { connection, lastDisconnect } = s;
        if (connection === "open") {
            console.log(chalk.green("рд▓реЙрдЧрд┐рди рд╕рдлрд▓!"));
            await delay(2000);
            rl.close(); // readline рдХреЛ рдмрдВрдж рдХрд░реЗрдВ

            // рдЧреНрд░реБрдк UID рджрд┐рдЦрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рд╡рд┐рдХрд▓реНрдк
            const showGroupIds = await question(chalk.green("рдХреНрдпрд╛ рдЖрдк рдЧреНрд░реБрдк UID рджреЗрдЦрдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ? (YES/NO): "));
            if (showGroupIds.toLowerCase() === "yes") {
                // рдпрд╣рд╛рдБ рдкрд░ рдЧреНрд░реБрдк UID рджрд┐рдЦрд╛рдиреЗ рдХрд╛ рдХреЛрдб рдЬреЛрдбрд╝реЗрдВ
                console.log("рдпрд╣рд╛рдБ рдкрд░ рдЖрдкрдХреЗ рдЧреНрд░реБрдк UID рд╣реЛрдВрдЧреЗред");
                // рдЙрджрд╛рд╣рд░рдг рдХреЗ рд▓рд┐рдП, рдЖрдк рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдХреЛрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ
                const groups = await XeonBotInc.groupFetchAll();
                for (const id in groups) {
                    console.log(`Group ID: ${groups[id].id}, Name: ${groups[id].subject}`);
                }
            }

            // рдХрд┐рддрдиреЗ рдмрд╛рд░ рд░рди рдХрд░рдирд╛ рд╣реИ рдкреВрдЫреЗрдВ
            const runCount = await question(chalk.green("рдХрд┐рддрдиреЗ рдмрд╛рд░ рд░рди рдХрд░рдирд╛ рд╣реИ? : "));
            for (let i = 0; i < runCount; i++) {
                const runType = await question(chalk.green("рдХреГрдкрдпрд╛ 'group' рдпрд╛ 'number' рдореЗрдВ рд╕реЗ рдПрдХ рдЪреБрдиреЗрдВ: "));
                if (runType.toLowerCase() === "group") {
                    const groupID = await question(chalk.green("рдХреГрдкрдпрд╛ рдЧреНрд░реБрдк UID рджрд░реНрдЬ рдХрд░реЗрдВ: "));
                    console.log(`рдЧреНрд░реБрдк UID ${groupID} рдореЗрдВ рд░рди рдХрд┐рдпрд╛ рдЬрд╛рдПрдЧрд╛ред`);
                } else if (runType.toLowerCase() === "number") {
                    const number = await question(chalk.green("рдХреГрдкрдпрд╛ рдлреЛрди рдирдВрдмрд░ рджрд░реНрдЬ рдХрд░реЗрдВ: "));
                    console.log(`рдлреЛрди рдирдВрдмрд░ ${number} рдкрд░ рд░рди рдХрд┐рдпрд╛ рдЬрд╛рдПрдЧрд╛ред`);
                }

                const timeInterval = await question(chalk.green("рдХреГрдкрдпрд╛ рд╕рдордп рдЕрдВрддрд░рд╛рд▓ (рд╕реЗрдХрдВрдб рдореЗрдВ) рджрд░реНрдЬ рдХрд░реЗрдВ: "));
                const headerName = await question(chalk.green("рдХреГрдкрдпрд╛ рд╣реЗрдбрд░ рдирд╛рдо рджрд░реНрдЬ рдХрд░реЗрдВ: "));
                const msgFilePath = await question(chalk.green("рдХреГрдкрдпрд╛ рд╕рдВрджреЗрд╢ рдлрд╝рд╛рдЗрд▓ рдХрд╛ рдкрде рджрд░реНрдЬ рдХрд░реЗрдВ: "));
                
                // рд╕рдВрджреЗрд╢ рднреЗрдЬрдиреЗ рдХреА рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдпрд╣рд╛рдБ рдХрд░реЗрдВ
                console.log(`рд╣реЗрдбрд░ рдирд╛рдо: ${headerName}, рдлрд╝рд╛рдЗрд▓ рдкрде: ${msgFilePath}, рд╕рдордп рдЕрдВрддрд░рд╛рд▓: ${timeInterval} рд╕реЗрдХрдВрдб`);
                // рд╡рд╛рд╕реНрддрд╡рд┐рдХ рд╕рдВрджреЗрд╢ рднреЗрдЬрдиреЗ рдХрд╛ рдХреЛрдб рдпрд╣рд╛рдБ рдЬреЛрдбрд╝реЗрдВред
            }
        }
        if (connection === "close" && lastDisconnect) {
            console.log("рдХрдиреЗрдХреНрд╢рди рдмрдВрдж рд╣реЛ рдЧрдпрд╛:", lastDisconnect.error);
            pairingLogin(); // рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВ
        }
    });

    XeonBotInc.ev.on('creds.update', saveCreds);
}

pairingLogin();

process.on('uncaughtException', function (err) {
    let e = String(err);
    if (!e.includes("conflict") && !e.includes("not-authorized") && !e.includes("Connection Closed")) {
        console.log('Caught exception: ', err);
    }
});
